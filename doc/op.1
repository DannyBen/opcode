.\" Automatically generated by Pandoc 3.1.9
.\"
.TH "op" "1" "May 2024" "Version 1.0.0" "local command shortcuts"
.SH NAME
\f[B]op\f[R] - local command shortcuts
.SH SYNOPSIS
\f[B]op\f[R] CODE [ARGS]
.PD 0
.P
.PD
\f[B]op\f[R] OPTIONS
.SH DESCRIPTION
\f[B]opcode\f[R] lets you define a simple configuration file in any
directory.
.PP
This file includes command shortcuts (\f[I]opcodes\f[R]) that can be
executed by running \f[B]op CODE\f[R].
.SH OPTIONS
.SS ?
Show all codes and their usage comments (#?)
.SS --list, -l
List command codes
.SS --show, -s
Show the config file (op.conf)
.SS --what, -w [CODE]
Show the command for a given code or all codes
.SS --edit, -e
Open the config file for editing
.SS --add, -a CODE COMMAND...
Append a command to the config file
.SS --help, -h
Show help message
.SS --version, -v
Show version number
.SH OPCODE FILE
Running \f[B]op\f[R] will look for a file named \f[B]op.conf\f[R] or
\f[B]opcode\f[R] in the working directory.
.PP
The syntax of this file is simple - each line should contain a code and
the command to run:
.IP
.EX
code: command to run
.EE
.PP
For example:
.IP
.EX
commit: git commit -am \[dq]quick commit\[dq]
.EE
.PP
With this configuration, you can now simply run:
.IP
.EX
$ op commit
.EE
.PP
Any argument provided to the CLI will be forwarded to the command, so
with this configuration:
.IP
.EX
commit: git commit -am
.EE
.PP
You can supply a commit message:
.IP
.EX
$ op commit \[dq]my commit message\[dq]
.EE
.SS Positional Arguments
In some cases, you may want to use the command line arguments in
different positions in your command.
Given this configuration:
.IP
.EX
deploy: git commit -am \[dq]$1\[dq] && git push
.EE
.PP
You can now run:
.IP
.EX
$ op deploy \[dq]version 1.1.1\[dq]
.EE
.PP
and it will be translated to this command
.IP
.EX
git commit -am \[dq]version 1.1.1\[dq] && git push
.EE
.PP
This is made possible due to the fact that any command that contains a
\f[B]$\f[R] character, will not have the command line arguments
(\f[B]$\[at]\f[R]) appended to it.
.SS Usage Comments
You may add special usage comments in your \f[CR]op.conf\f[R] file.
These will be displayed alongside their command code when running
\f[CR]op ?\f[R].
The usage comments must start with \f[CR]#?\f[R] and be placed
underneath their associated command.
.PP
For example, this configuration file:
.IP
.EX
# op.conf
deploy: git commit -am \[dq]$1\[dq] && git push
#? perform git commit and push.
#? usage: op deploy COMMIT_MESSAGE

pull: git pull
#? perform git pull
.EE
.PP
will result in this output:
.IP
.EX
$ op ?
deploy
  perform git commit and push.
  usage: op deploy COMMIT_MESSAGE

pull
  perform git pull
.EE
.SS Private Commands
Using the keyword \f[CR]private\f[R] in a separate line anywhere in your
\f[CR]op.conf\f[R] file will hide all subsequent commands from
\f[CR]op ?\f[R] and \f[CR]op --list\f[R].
The private commands can still be executed.
.IP
.EX
deploy: op clean && op build
test: docker compose run test

private

clean: rm tmp/*
build: docker build
.EE
.SS Multiline Commands
In order to specify multiple commands for a single code, provide the
commands indented with one or more spaces immediately under the command
code:
.IP
.EX
up:
  docker compose build
  docker compose up web
.EE
.PP
Note that these commands will be joined together with \f[B]&&\f[R] - so
the above will be converted to:
.IP
.EX
docker compose build && docker compose up web
.EE
.SS Concatenated Lines
In case you wish to split your command to multiple lines without joining
the lines with \f[B]&&\f[R], you can add escape the newline by using
\f[B]\[rs]\f[R] (backslash):
.IP
.EX
concat: echo who \[rs]
  ordered \[rs]
  this \[rs]
  pizza
.EE
.PP
Using this syntax will generate this command:
.IP
.EX
echo who ordered this pizza
.EE
.SH PARTIAL COMMAND MATCHING
When running a command, opcode will first try to find an exact match.
If none is found, it will try to find a command that starts with the
code you typed.
.PP
In other words, if you have this in your \f[CR]op.conf\f[R] file:
.IP
.EX
server: echo \[dq]Running Server\[dq] && rackup
.EE
.PP
You can run it with \f[B]op server\f[R], \f[B]op s\f[R] and anything in
between.
The first matched command will be executed.
.SH BASH COMPLETION
Opcode comes with bash completion.
If you install opcode using the setup script, bash completion will be
installed automatically.
.PP
If you install opcode manually, and would like to enable bash
completion, simply add this to your \f[CR]\[ti]/.bashrc\f[R]:
.IP
.EX
complete -C \[aq]op --completion\[aq] op
.EE
.SH SOURCE CODE
https://github.com/dannyben/opcode
.SH ISSUE TRACKER
https://github.com/dannyben/opcode/issues
.SH AUTHORS
Danny Ben Shitrit <https://github.com/dannyben>.
