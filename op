#!/usr/bin/env bash
# ---------------------------------------------------------------
# opcode - local command shortcuts
# ---------------------------------------------------------------
opcode_context() {
  usage() {
    long_usage=0

    [[ "$1" == "long" ]] && long_usage=1

    if [[ $long_usage == 1 ]]; then
      printf "opcode %s - local command shortcuts\n\n" "$VERSION"
    fi

    printf "Usage:\n"
    printf "  op CODE [ARGS]\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Execute a command from the config file (%s)\n" "$CONFIG_FILE"
      printf "    Arguments will be passed to the command (use with \"\$@\")\n\n"
    fi

    printf "  op ?, -i, --info\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Show all codes and their usage comments (#?)\n\n"
    fi

    printf "  op -l, --list\n"
    if [[ $long_usage == 1 ]]; then
      printf "    List command codes\n\n"
    fi

    printf "  op -s, --show\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Show the config file (%s)\n\n" "$CONFIG_FILE"
    fi

    printf "  op -w, --what [CODE]\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Show the command for a given code\n\n"
    fi

    printf "  op -e, --edit\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Open the config file for editing\n\n"
    fi

    printf "  op -a, --add CODE COMMAND...\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Append a command to the config file\n\n"
    fi

    printf "  op -h, --help\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Show this message\n\n"
    fi

    printf "  op -v, --version\n"
    if [[ $long_usage == 1 ]]; then
      printf "    Show version number\n\n"
    fi
  }

  abort() {
    echo "$1" >&2
    exit "${2:-1}"
  }

  need_config() {
    if [[ ! -f $CONFIG_FILE ]]; then
      abort "Cannot find config file ($CONFIG_FILE)"
    fi
  }

  find_command() {
    need_config
    code="$1"

    result=$(get_script "$code" "exact")
    if [[ -z $result ]]; then
      result=$(get_script "$code" "fuzzy")
    fi

    echo "$result"
  }

  get_script() {
    local code="$1"
    local mode="$2"
    local -a script=()
    local strict_pattern="^${code}:[[:space:]]*(.*)$"
    local fuzzy_pattern="^${code}[^:]*:[[:space:]]*(.*)$"
    local found=0

    if [[ $mode == "fuzzy" ]]; then
      pattern="$fuzzy_pattern"
    else
      pattern="$strict_pattern"
    fi

    while IFS= read -r line || [[ -n $line ]]; do
      if [[ $line =~ $pattern ]]; then
        if [[ $found == 1 ]]; then
          break
        fi

        found=1
        line="${BASH_REMATCH[1]}"
        if [[ -n $line ]]; then
          script+=("$line")
        fi
      elif [[ $found == 1 ]]; then
        if [[ $line =~ ^[[:space:]]+(.+)$ ]]; then
          script+=("${BASH_REMATCH[1]}")
        else
          break
        fi
      fi
    done <"$CONFIG_FILE"

    printf "%s\n" "${script[@]}"
  }

  run_command() {
    local command
    local code="$1"
    shift # so that $@ is properly available to the user script

    command=$(find_command "$code")
    if [[ -z $command ]]; then
      abort "Code not found: $code"
    fi

    eval "$command"
  }

  add_command() {
    if [[ $# -lt 2 ]]; then
      echo "Invalid operation"
      usage
      exit 1
    fi

    new_code=$1

    shift
    new_command=$(shellwords "${@}")

    echo "$new_code: $new_command" >>"$CONFIG_FILE"
    show_config
  }

  shellwords() {
    input=("$@")
    declare -a output

    for word in "${input[@]}"; do
      if [[ $word =~ [[:space:]] ]]; then
        output+=("\"$word\"")
      else
        output+=("$word")
      fi
    done

    echo "${output[@]}"
  }

  list_codes() {
    need_config
    regex="^([a-zA-Z0-9_.-]+):"
    break_regex="^[[:space:]]*private[[:space:]]*$"
    count=0
    max_columns=4
    column_width=18

    while IFS= read -r line || [[ -n "$line" ]]; do
      if [[ $line =~ $regex ]]; then
        printf "%-${column_width}s" "${BASH_REMATCH[1]}"
        ((count = count + 1))
        if ((count % max_columns == 0)); then
          printf "\n"
        fi
      elif [[ $line =~ $break_regex ]]; then
        break
      fi
    done <"$CONFIG_FILE"

    printf "\n"

    if ((count % max_columns != 0)); then
      printf "\n"
    fi
  }

  list_codes_extended() {
    need_config
    code_regex="^([a-zA-Z0-9_.-]+):"
    comment_regex="^#\? ?(.*)"
    break_regex="^[[:space:]]*private[[:space:]]*$"
    header_regex="^## ?(.*)"
    comment_found=0

    echo "Usage: op CODE [ARGS]"

    # shellcheck disable=SC2162
    while IFS= read line || [[ -n "$line" ]]; do
      if [[ $line =~ $break_regex ]]; then
        break
      fi

      if [[ $line =~ $header_regex ]]; then
        printf "\n%s\n\n" "$(green "${BASH_REMATCH[1]}")"
        comment_found=0

      elif [[ $line =~ $code_regex ]]; then
        if [[ $comment_found == 1 ]]; then
          printf "\n"
          comment_found=0
        fi
        printf "  %s\n" "$(bold "${BASH_REMATCH[1]}")"

      elif [[ $line =~ $comment_regex ]]; then
        comment_found=1
        printf "    %s\n" "${BASH_REMATCH[1]}"

      fi
    done <"$CONFIG_FILE"
    printf "\n"
  }

  edit_config() {
    ${EDITOR:-vi} "$CONFIG_FILE"
  }

  show_config() {
    need_config
    cat "$CONFIG_FILE"
  }

  what_command() {
    local code="$1"
    local script

    if [[ -z $code ]]; then
      abort 'Usage: op --what CODE'
    fi

    script=$(get_script "$code")
    if [[ -n $script ]]; then
      echo "$script"
    else
      abort "Code not found: $code"
    fi
  }

  set_config_file() {
    if [[ -f "opcode" ]]; then
      CONFIG_FILE="opcode"
    else
      CONFIG_FILE="op.conf"
    fi
  }

  list_or_usage() {
    if [[ -f $CONFIG_FILE ]]; then
      list_codes
    else
      usage
    fi
  }

  send_completion() {
    [[ -z "$COMP_LINE" || ! -f $CONFIG_FILE ]] && return
    # shellcheck disable=SC2086
    set $COMP_LINE
    if [[ $# -eq 1 ]]; then
      compgen -W "$(op --list)"
    else
      compgen -W "$(op --list)" "${@: -1}"
    fi
  }

  opcode_run() {
    case "$1" in
      "") list_or_usage ;;
      \? | -i | --info) list_codes_extended ;;
      -l | --list) list_codes ;;
      -s | --show) show_config ;;
      -w | --what) what_command "$2" ;;
      -e | --edit) edit_config ;;
      -a | --add) add_command "${@:2}" ;;
      -h | --help) usage 'long' ;;
      -v | --version) echo "$VERSION" ;;
      --completion) send_completion ;;
      *) run_command "$@" ;;
    esac
  }

  # color functions are here even if not used directly to allow using in op.conf
  bold() { printf "\e[1m%b\e[0m\n" "$*"; }
  red() { printf "\e[31m%b\e[0m\n" "$*"; }
  green() { printf "\e[32m%b\e[0m\n" "$*"; }
  yellow() { printf "\e[33m%b\e[0m\n" "$*"; }
  blue() { printf "\e[34m%b\e[0m\n" "$*"; }
  magenta() { printf "\e[35m%b\e[0m\n" "$*"; }
  cyan() { printf "\e[36m%b\e[0m\n" "$*"; }

  opcode_initialize() {
    VERSION="1.1.1"
    set_config_file
    set -e
  }

  opcode_initialize
  opcode_run "$@"
}

opcode_context "$@"
