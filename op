#!/usr/bin/env bash
# ---------------------------------------------------------------
# opcode - local command shortcuts
# ---------------------------------------------------------------
usage() { 
  if $LONG_USAGE; then
    printf "opcode $VERSION - local command shortcuts\n\n"
  fi
  printf "Usage:\n"
  printf "  op CODE [ARGS]\n"
  if $LONG_USAGE; then
    printf "    Execute a command from $CONFIG_FILE\n"
    printf "    Arguments will be passed to the command\n\n"
  fi
  printf "  op -s|--show\n"
  if $LONG_USAGE; then
    printf "    Show $CONFIG_FILE\n\n"
  fi
  printf "  op -e|--edit\n"
  if $LONG_USAGE; then
    printf "    Open $CONFIG_FILE for editing\n\n"
  fi
  printf "  op -h|--help\n"
  if $LONG_USAGE; then
    printf "    Show this message\n\n"
  fi
  printf "  op -v|--version\n"
  if $LONG_USAGE; then
    printf "    Show version number\n\n"
  fi
}

need_config() {
  if [[ ! -f $CONFIG_FILE ]]; then
    echo "Cannot find $CONFIG_FILE"
    exit 1
  fi
}

find_command() {
  need_config
  regex="^$CODE:\s*(.+)$"

  while IFS= read -r line; do
    if [[ $line =~ $regex ]]; then
      COMMAND="${BASH_REMATCH[1]}"
      break
    fi
  done < $CONFIG_FILE
}

run_command() {
  find_command
  if [[ -n $COMMAND ]]; then
    eval $COMMAND "$@"
  else
    echo "Code not found: $CODE"
    exit 1
  fi
}

edit() {
  need_config
  ${EDITOR:-vi} $CONFIG_FILE
}

show() {
  need_config
  cat $CONFIG_FILE
}

run() {
  case "$1" in
    "" ) usage ;;
    -s | --show    ) show ;;
    -e | --edit    ) edit ;;
    -h | --help    ) LONG_USAGE=true; usage ;;
    -v | --version ) echo $VERSION ;;
    * ) CODE=$1; shift; run_command "$@" ;;
  esac
}

initialize() {
  VERSION="0.0.1"
  LONG_USAGE=false
  CONFIG_FILE="op.conf"
  set -e
}

initialize
run "$@"
