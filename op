#!/usr/bin/env bash
# ---------------------------------------------------------------
# opcode - local command shortcuts
# ---------------------------------------------------------------
opcode_context() {
  usage() { 
    if $LONG_USAGE; then
      printf "opcode %s - local command shortcuts\n\n" "$VERSION"
    fi
    printf "Usage:\n"
    printf "  op CODE [ARGS]\n"
    if $LONG_USAGE; then
      printf "    Execute a command from the config file (%s)\n" "$CONFIG_FILE"
      printf "    Arguments will be passed to the command\n\n"
    fi
    printf "  op ?\n"
    if $LONG_USAGE; then
      printf "    Show all codes and their usage comments (#?)\n\n"
    fi
    printf "  op -l, --list\n"
    if $LONG_USAGE; then
      printf "    List command codes\n\n"
    fi
    printf "  op -s, --show\n"
    if $LONG_USAGE; then
      printf "    Show the config file (%s)\n\n" "$CONFIG_FILE"
    fi
    printf "  op -w, --what [CODE]\n"
    if $LONG_USAGE; then
      printf "    Show the command for a given code or all codes\n\n"
    fi
    printf "  op -e, --edit\n"
    if $LONG_USAGE; then
      printf "    Open the config file for editing\n\n"
    fi
    printf "  op -a, --add CODE COMMAND...\n"
    if $LONG_USAGE; then
      printf "    Append a command to the config file\n\n"
    fi
    printf "  op -h, --help\n"
    if $LONG_USAGE; then
      printf "    Show this message\n\n"
    fi
    printf "  op -v, --version\n"
    if $LONG_USAGE; then
      printf "    Show version number\n\n"
    fi
  }

  need_config() {
    if [[ ! -f $CONFIG_FILE ]]; then
      echo "Cannot find config file ($CONFIG_FILE)"
      exit 1
    fi
  }

  find_command() {
    need_config

    if [[ -z $CODE ]]; then
      echo "Invalid operation"
      usage
      exit 1
    fi

    exact="^${CODE}:[[:space:]]*(.+)$"
    fuzzy="^${CODE}[^\:]*:[[:space:]]*(.+)$"

    # shellcheck disable=SC2162
    while IFS= read line || [ -n "$line" ]; do
      if [[ $line =~ $exact ]]; then
        COMMAND="${BASH_REMATCH[1]}"
        break
      fi
    done < "$CONFIG_FILE"

    if [[ -n "$COMMAND" ]]; then
      return
    fi

    # shellcheck disable=SC2162
    while IFS= read line || [ -n "$line" ]; do
      if [[ $line =~ $fuzzy ]]; then
        COMMAND="${BASH_REMATCH[1]}"
        break
      fi
    done < "$CONFIG_FILE"
  }

  run_command() {
    find_command
    if [[ -n $COMMAND ]]; then
      if [[ $COMMAND =~ \$ ]]; then
        eval "$COMMAND"
      else
        # shellcheck disable=SC2294
        eval "$COMMAND" "$@"
      fi
    else
      echo "Code not found: $CODE"
      exit 1
    fi
  }

  add_command() {
    if [[ $# -lt 2 ]]; then
      echo "Invalid operation"
      usage
      exit 1
    fi

    new_code=$1

    shift
    new_command=$(shellwords "${@}")

    echo "$new_code: $new_command" >> "$CONFIG_FILE"
    show_config
  }

  shellwords() {
    input=( "$@" )
    declare -a output
    
    for word in "${input[@]}"; do
      if [[ $word =~ [[:space:]] ]]; then
        output+=( "\"$word\"" )
      else
        output+=( "$word" )
      fi
    done

    echo "${output[@]}"
  }
  
  list_codes() {
    need_config
    regex="^([^#][^:]+):"
    break_regex="^[[:space:]]*private[[:space:]]*$"

    # shellcheck disable=SC2162
    while IFS= read line || [ -n "$line" ]; do
      if [[ $line =~ $regex ]]; then
        printf "%s   " "${BASH_REMATCH[1]}"
      elif [[ $line =~ $break_regex ]]; then
        break
      fi
    done < "$CONFIG_FILE"
    printf "\n"
  }

  list_codes_extended() {
    need_config
    regex="^([^#][^:]+):"
    comment_regex="^#\? ?(.*)"
    break_regex="^[[:space:]]*private[[:space:]]*$"

    # shellcheck disable=SC2162
    while IFS= read line || [ -n "$line" ]; do
      if [[ $line =~ $break_regex ]]; then
        break
      fi
      if [[ $line =~ $regex ]]; then
        printf "\n%s\n" "$(green "${BASH_REMATCH[1]}")"
      fi
      if [[ $line =~ $comment_regex ]]; then
        printf "  %s\n" "${BASH_REMATCH[1]}"
      fi
    done < "$CONFIG_FILE"
    printf "\n"
  }

  edit_config() {
    ${EDITOR:-vi} "$CONFIG_FILE"
  }

  show_config() {
    need_config
    cat "$CONFIG_FILE"
  }

  what_command() {
    if [[ -z "$CODE" ]]; then
      regex="^([^#][^:]*):[[:space:]]*(.+)$"
      break_regex="^[[:space:]]*private[[:space:]]*$"

      # shellcheck disable=SC2162
      while IFS= read line || [ -n "$line" ]; do
        if [[ $line =~ $regex ]]; then
          printf "%s: %s\n" "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}"
        elif [[ $line =~ $break_regex ]]; then
          break
        fi
      done < "$CONFIG_FILE"

    else
      find_command
      if [[ -n $COMMAND ]]; then
        # shellcheck disable=SC2086
        echo $COMMAND
      else
        echo "Code not found: $CODE"
        exit 1
      fi

    fi
  }

  set_config_file() {
    if [[ -f "opcode" ]]; then
      CONFIG_FILE="opcode"
    else
      CONFIG_FILE="op.conf"
    fi
  }

  list_or_usage() {
    if [[ -f $CONFIG_FILE ]]; then
      list_codes
    else
      usage
    fi
  }

  send_completion() {
    [[ -z "$COMP_LINE" || ! -f $CONFIG_FILE ]] && return
    # shellcheck disable=SC2086
    set $COMP_LINE
    if [[ $# -eq 1 ]]; then
      compgen -W "$(op --list)"
    else
      compgen -W "$(op --list)" "${@: -1}"
    fi
  }

  opcode_run() {
    case "$1" in
      "" ) list_or_usage ;;
      "?"            ) list_codes_extended ;;
      -l | --list    ) list_codes ;;
      -s | --show    ) show_config ;;
      -w | --what    ) shift; CODE=$1; what_command ;;
      -e | --edit    ) edit_config ;;
      -a | --add     ) shift; add_command "$@" ;;
      -h | --help    ) LONG_USAGE=true; usage ;;
      -v | --version ) echo "$VERSION" ;;
      --completion ) send_completion ;;
      * ) CODE=$1; shift; run_command "$@" ;;
    esac
  }

  green() { printf "\e[32m%b\e[0m\n" "$*"; }

  opcode_initialize() {
    VERSION="0.6.3"
    LONG_USAGE=false
    set_config_file
    set -e
  }

  opcode_initialize
  opcode_run "$@"
}

opcode_context "$@"
